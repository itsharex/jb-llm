/*    */ package ai.grazie.tree.model;@Serializable
/*    */ @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000F\n\002\030\002\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020\016\n\000\n\002\020\021\n\002\030\002\n\000\n\002\030\002\n\002\b\f\n\002\020\013\n\002\b\004\n\002\020\002\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\005\b\b\030\000 #2\0020\001:\004\"#$%B3\b\027\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005\022\016\020\006\032\n\022\004\022\0020\b\030\0010\007\022\b\020\t\032\004\030\0010\n¢\006\002\020\013B\033\022\006\020\004\032\0020\005\022\f\020\006\032\b\022\004\022\0020\b0\007¢\006\002\020\fJ\t\020\022\032\0020\005HÆ\003J\024\020\023\032\b\022\004\022\0020\b0\007HÆ\003¢\006\002\020\020J(\020\024\032\0020\0002\b\b\002\020\004\032\0020\0052\016\b\002\020\006\032\b\022\004\022\0020\b0\007HÆ\001¢\006\002\020\025J\023\020\026\032\0020\0272\b\020\030\032\004\030\0010\001H\002J\b\020\031\032\0020\003H\026J\t\020\032\032\0020\005HÖ\001J!\020\033\032\0020\0342\006\020\035\032\0020\0002\006\020\036\032\0020\0372\006\020 \032\0020!HÇ\001R\021\020\004\032\0020\005¢\006\b\n\000\032\004\b\r\020\016R\031\020\006\032\b\022\004\022\0020\b0\007¢\006\n\n\002\020\021\032\004\b\017\020\020¨\006&"}, d2 = {"Lai/grazie/tree/model/SentenceWithTreeDependencies;", "", "seen1", "", "text", "", "tree", "", "Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(ILjava/lang/String;[Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;Lkotlinx/serialization/internal/SerializationConstructorMarker;)V", "(Ljava/lang/String;[Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;)V", "getText", "()Ljava/lang/String;", "getTree", "()[Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "[Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "component1", "component2", "copy", "(Ljava/lang/String;[Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;)Lai/grazie/tree/model/SentenceWithTreeDependencies;", "equals", "", "other", "hashCode", "toString", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "$serializer", "Companion", "ConlluBatch", "Node", "model-tree"})
/*    */ public final class SentenceWithTreeDependencies { @NotNull
/*    */   public static final Companion Companion = new Companion(null); @NotNull
/*    */   private final String text;
/*    */   @NotNull
/*    */   private final Node[] tree;
/*    */   
/*  9 */   public SentenceWithTreeDependencies(@NotNull String text, @NotNull Node[] tree) { this.text = text; this.tree = tree; } @JvmStatic public static final void write$Self(@NotNull SentenceWithTreeDependencies self, @NotNull CompositeEncoder output, @NotNull SerialDescriptor serialDesc) { Intrinsics.checkNotNullParameter(self, "self"); Intrinsics.checkNotNullParameter(output, "output"); Intrinsics.checkNotNullParameter(serialDesc, "serialDesc"); output.encodeStringElement(serialDesc, 0, self.text); output.encodeSerializableElement(serialDesc, 1, (SerializationStrategy)new ReferenceArraySerializer(Reflection.getOrCreateKotlinClass(Node.class), (KSerializer)Node.$serializer.INSTANCE), self.tree); } @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN) @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/tree/model/SentenceWithTreeDependencies.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/tree/model/SentenceWithTreeDependencies;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-tree"}) public static final class $serializer implements GeneratedSerializer<SentenceWithTreeDependencies> { @NotNull public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[2]; arrayOfKSerializer[0] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)new ReferenceArraySerializer(Reflection.getOrCreateKotlinClass(SentenceWithTreeDependencies.Node.class), (KSerializer)SentenceWithTreeDependencies.Node.$serializer.INSTANCE); return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public SentenceWithTreeDependencies deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; String str = null; Object object = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { str = compositeDecoder.decodeStringElement(serialDescriptor, 0); i |= 0x1; object = compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)new ReferenceArraySerializer(Reflection.getOrCreateKotlinClass(SentenceWithTreeDependencies.Node.class), (KSerializer)SentenceWithTreeDependencies.Node.$serializer.INSTANCE), object); i |= 0x2; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: str = compositeDecoder.decodeStringElement(serialDescriptor, 0); i |= 0x1; continue;case 1: object = compositeDecoder.decodeSerializableElement(serialDescriptor, 1, (DeserializationStrategy)new ReferenceArraySerializer(Reflection.getOrCreateKotlinClass(SentenceWithTreeDependencies.Node.class), (KSerializer)SentenceWithTreeDependencies.Node.$serializer.INSTANCE), object); i |= 0x2; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new SentenceWithTreeDependencies(i, str, (SentenceWithTreeDependencies.Node[])object, null); } public void serialize(@NotNull Encoder encoder, @NotNull SentenceWithTreeDependencies value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); SentenceWithTreeDependencies.write$Self(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.tree.model.SentenceWithTreeDependencies", INSTANCE, 2); pluginGeneratedSerialDescriptor.addElement("text", false); pluginGeneratedSerialDescriptor.addElement("tree", false); descriptor = pluginGeneratedSerialDescriptor; } } @NotNull public final String getText() { return this.text; } @NotNull public final Node[] getTree() { return this.tree; }
/*    */   
/*    */   @Serializable
/*    */   @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000D\n\002\030\002\n\002\020\000\n\000\n\002\020\b\n\000\n\002\030\002\n\000\n\002\020\016\n\002\b\003\n\002\030\002\n\002\b\016\n\002\020\013\n\002\b\004\n\002\020\002\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\003\b\b\030\000 &2\0020\001:\002%&BA\b\027\022\006\020\002\032\0020\003\022\b\020\004\032\004\030\0010\005\022\b\020\006\032\004\030\0010\007\022\b\020\b\032\004\030\0010\007\022\b\020\t\032\004\030\0010\007\022\b\020\n\032\004\030\0010\013¢\006\002\020\fB%\022\006\020\004\032\0020\005\022\006\020\006\032\0020\007\022\006\020\b\032\0020\007\022\006\020\t\032\0020\007¢\006\002\020\rJ\t\020\024\032\0020\005HÆ\003J\t\020\025\032\0020\007HÆ\003J\t\020\026\032\0020\007HÆ\003J\t\020\027\032\0020\007HÆ\003J1\020\030\032\0020\0002\b\b\002\020\004\032\0020\0052\b\b\002\020\006\032\0020\0072\b\b\002\020\b\032\0020\0072\b\b\002\020\t\032\0020\007HÆ\001J\023\020\031\032\0020\0322\b\020\033\032\004\030\0010\001HÖ\003J\t\020\034\032\0020\003HÖ\001J\t\020\035\032\0020\007HÖ\001J!\020\036\032\0020\0372\006\020 \032\0020\0002\006\020!\032\0020\"2\006\020#\032\0020$HÇ\001R\021\020\t\032\0020\007¢\006\b\n\000\032\004\b\016\020\017R\021\020\b\032\0020\007¢\006\b\n\000\032\004\b\020\020\017R\021\020\006\032\0020\007¢\006\b\n\000\032\004\b\021\020\017R\021\020\004\032\0020\005¢\006\b\n\000\032\004\b\022\020\023¨\006'"}, d2 = {"Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "", "seen1", "", "range", "Lai/grazie/text/TextRange;", "id", "", "headId", "dependency", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(ILai/grazie/text/TextRange;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lkotlinx/serialization/internal/SerializationConstructorMarker;)V", "(Lai/grazie/text/TextRange;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V", "getDependency", "()Ljava/lang/String;", "getHeadId", "getId", "getRange", "()Lai/grazie/text/TextRange;", "component1", "component2", "component3", "component4", "copy", "equals", "", "other", "hashCode", "toString", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "$serializer", "Companion", "model-tree"})
/*    */   public static final class Node { @NotNull
/*    */     public static final Companion Companion = new Companion(null);
/*    */     @NotNull
/*    */     private final TextRange range;
/*    */     @NotNull
/*    */     private final String id;
/*    */     @NotNull
/*    */     private final String headId;
/*    */     @NotNull
/*    */     private final String dependency;
/*    */     
/* 24 */     public Node(@NotNull TextRange range, @NotNull String id, @NotNull String headId, @NotNull String dependency) { this.range = range; this.id = id; this.headId = headId; this.dependency = dependency; } @JvmStatic public static final void write$Self(@NotNull Node self, @NotNull CompositeEncoder output, @NotNull SerialDescriptor serialDesc) { Intrinsics.checkNotNullParameter(self, "self"); Intrinsics.checkNotNullParameter(output, "output"); Intrinsics.checkNotNullParameter(serialDesc, "serialDesc"); output.encodeSerializableElement(serialDesc, 0, (SerializationStrategy)TextRange$.serializer.INSTANCE, self.range); output.encodeStringElement(serialDesc, 1, self.id); output.encodeStringElement(serialDesc, 2, self.headId); output.encodeStringElement(serialDesc, 3, self.dependency); } @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN) @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/tree/model/SentenceWithTreeDependencies.Node.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-tree"}) public static final class $serializer implements GeneratedSerializer<Node> { @NotNull public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[4]; arrayOfKSerializer[0] = (KSerializer)TextRange$.serializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[2] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[3] = (KSerializer)StringSerializer.INSTANCE; return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public SentenceWithTreeDependencies.Node deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; Object object = null; String str1 = null, str2 = null, str3 = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { object = compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)TextRange$.serializer.INSTANCE, object); i |= 0x1; str1 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; str2 = compositeDecoder.decodeStringElement(serialDescriptor, 2); i |= 0x4; str3 = compositeDecoder.decodeStringElement(serialDescriptor, 3); i |= 0x8; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: object = compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)TextRange$.serializer.INSTANCE, object); i |= 0x1; continue;case 1: str1 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; continue;case 2: str2 = compositeDecoder.decodeStringElement(serialDescriptor, 2); i |= 0x4; continue;case 3: str3 = compositeDecoder.decodeStringElement(serialDescriptor, 3); i |= 0x8; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new SentenceWithTreeDependencies.Node(i, (TextRange)object, str1, str2, str3, null); } public void serialize(@NotNull Encoder encoder, @NotNull SentenceWithTreeDependencies.Node value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); SentenceWithTreeDependencies.Node.write$Self(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.tree.model.SentenceWithTreeDependencies.Node", INSTANCE, 4); pluginGeneratedSerialDescriptor.addElement("range", false); pluginGeneratedSerialDescriptor.addElement("id", false); pluginGeneratedSerialDescriptor.addElement("headId", false); pluginGeneratedSerialDescriptor.addElement("dependency", false); descriptor = pluginGeneratedSerialDescriptor; } } @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000\026\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002J\017\020\003\032\b\022\004\022\0020\0050\004HÆ\001¨\006\006"}, d2 = {"Lai/grazie/tree/model/SentenceWithTreeDependencies$Node$Companion;", "", "()V", "serializer", "Lkotlinx/serialization/KSerializer;", "Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "model-tree"}) public static final class Companion { private Companion() {} @NotNull public final KSerializer<SentenceWithTreeDependencies.Node> serializer() { return (KSerializer<SentenceWithTreeDependencies.Node>)SentenceWithTreeDependencies.Node.$serializer.INSTANCE; } } @NotNull public final TextRange getRange() { return this.range; } @NotNull public final String getId() { return this.id; } @NotNull public final String getHeadId() { return this.headId; } @NotNull public final TextRange component1() { return this.range; } @NotNull public final String component2() { return this.id; } @NotNull public final String component3() { return this.headId; } @NotNull public final String component4() { return this.dependency; } @NotNull public final Node copy(@NotNull TextRange range, @NotNull String id, @NotNull String headId, @NotNull String dependency) { Intrinsics.checkNotNullParameter(range, "range"); Intrinsics.checkNotNullParameter(id, "id"); Intrinsics.checkNotNullParameter(headId, "headId"); Intrinsics.checkNotNullParameter(dependency, "dependency"); return new Node(range, id, headId, dependency); } @NotNull public String toString() { return "Node(range=" + this.range + ", id=" + this.id + ", headId=" + this.headId + ", dependency=" + this.dependency + ")"; } @NotNull public final String getDependency() { return this.dependency; }
/*    */     public int hashCode() { result = this.range.hashCode(); result = result * 31 + this.id.hashCode(); result = result * 31 + this.headId.hashCode(); return result * 31 + this.dependency.hashCode(); }
/*    */     public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof Node)) return false;  Node node = (Node)other; return !Intrinsics.areEqual(this.range, node.range) ? false : (!Intrinsics.areEqual(this.id, node.id) ? false : (!Intrinsics.areEqual(this.headId, node.headId) ? false : (!!Intrinsics.areEqual(this.dependency, node.dependency)))); } }
/*    */   
/*    */   @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN) @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/tree/model/SentenceWithTreeDependencies.Node.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-tree"}) public static final class $serializer implements GeneratedSerializer<Node> {
/*    */     @NotNull public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[4]; arrayOfKSerializer[0] = (KSerializer)TextRange$.serializer.INSTANCE; arrayOfKSerializer[1] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[2] = (KSerializer)StringSerializer.INSTANCE; arrayOfKSerializer[3] = (KSerializer)StringSerializer.INSTANCE; return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public SentenceWithTreeDependencies.Node deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; Object object = null; String str1 = null, str2 = null, str3 = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { object = compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)TextRange$.serializer.INSTANCE, object); i |= 0x1; str1 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; str2 = compositeDecoder.decodeStringElement(serialDescriptor, 2); i |= 0x4; str3 = compositeDecoder.decodeStringElement(serialDescriptor, 3); i |= 0x8; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: object = compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)TextRange$.serializer.INSTANCE, object); i |= 0x1; continue;case 1: str1 = compositeDecoder.decodeStringElement(serialDescriptor, 1); i |= 0x2; continue;case 2: str2 = compositeDecoder.decodeStringElement(serialDescriptor, 2); i |= 0x4; continue;case 3: str3 = compositeDecoder.decodeStringElement(serialDescriptor, 3); i |= 0x8; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new SentenceWithTreeDependencies.Node(i, (TextRange)object, str1, str2, str3, null); } public void serialize(@NotNull Encoder encoder, @NotNull SentenceWithTreeDependencies.Node value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); SentenceWithTreeDependencies.Node.write$Self(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.tree.model.SentenceWithTreeDependencies.Node", INSTANCE, 4); pluginGeneratedSerialDescriptor.addElement("range", false); pluginGeneratedSerialDescriptor.addElement("id", false); pluginGeneratedSerialDescriptor.addElement("headId", false); pluginGeneratedSerialDescriptor.addElement("dependency", false); descriptor = pluginGeneratedSerialDescriptor; }
/*    */   } @Serializable @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000@\n\002\030\002\n\002\020\000\n\000\n\002\020\b\n\000\n\002\020 \n\002\020\016\n\000\n\002\030\002\n\002\b\007\n\002\020\013\n\002\b\004\n\002\020\002\n\002\b\002\n\002\030\002\n\000\n\002\030\002\n\002\b\003\b\b\030\000 \0342\0020\001:\002\033\034B)\b\027\022\006\020\002\032\0020\003\022\016\020\004\032\n\022\004\022\0020\006\030\0010\005\022\b\020\007\032\004\030\0010\b¢\006\002\020\tB\023\022\f\020\004\032\b\022\004\022\0020\0060\005¢\006\002\020\nJ\017\020\r\032\b\022\004\022\0020\0060\005HÆ\003J\031\020\016\032\0020\0002\016\b\002\020\004\032\b\022\004\022\0020\0060\005HÆ\001J\023\020\017\032\0020\0202\b\020\021\032\004\030\0010\001HÖ\003J\t\020\022\032\0020\003HÖ\001J\t\020\023\032\0020\006HÖ\001J!\020\024\032\0020\0252\006\020\026\032\0020\0002\006\020\027\032\0020\0302\006\020\031\032\0020\032HÇ\001R\027\020\004\032\b\022\004\022\0020\0060\005¢\006\b\n\000\032\004\b\013\020\f¨\006\035"}, d2 = {"Lai/grazie/tree/model/SentenceWithTreeDependencies$ConlluBatch;", "", "seen1", "", "trees", "", "", "serializationConstructorMarker", "Lkotlinx/serialization/internal/SerializationConstructorMarker;", "(ILjava/util/List;Lkotlinx/serialization/internal/SerializationConstructorMarker;)V", "(Ljava/util/List;)V", "getTrees", "()Ljava/util/List;", "component1", "copy", "equals", "", "other", "hashCode", "toString", "write$Self", "", "self", "output", "Lkotlinx/serialization/encoding/CompositeEncoder;", "serialDesc", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "$serializer", "Companion", "model-tree"}) public static final class ConlluBatch {
/* 31 */     @NotNull public static final Companion Companion = new Companion(null); @NotNull private final List<String> trees; public ConlluBatch(@NotNull List<String> trees) { this.trees = trees; } @JvmStatic public static final void write$Self(@NotNull ConlluBatch self, @NotNull CompositeEncoder output, @NotNull SerialDescriptor serialDesc) { Intrinsics.checkNotNullParameter(self, "self"); Intrinsics.checkNotNullParameter(output, "output"); Intrinsics.checkNotNullParameter(serialDesc, "serialDesc"); output.encodeSerializableElement(serialDesc, 0, (SerializationStrategy)new ArrayListSerializer((KSerializer)StringSerializer.INSTANCE), self.trees); } @Deprecated(message = "This synthesized declaration should not be used directly", replaceWith = @ReplaceWith(expression = "", imports = {}), level = DeprecationLevel.HIDDEN) @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\0006\n\000\n\002\030\002\n\002\030\002\n\002\b\002\n\002\030\002\n\002\b\003\n\002\020\021\n\002\030\002\n\002\b\003\n\002\030\002\n\000\n\002\020\002\n\000\n\002\030\002\n\002\b\002\bÇ\002\030\0002\b\022\004\022\0020\0020\001B\007\b\002¢\006\002\020\003J\030\020\b\032\f\022\b\022\006\022\002\b\0030\n0\tHÖ\001¢\006\002\020\013J\021\020\f\032\0020\0022\006\020\r\032\0020\016HÖ\001J\031\020\017\032\0020\0202\006\020\021\032\0020\0222\006\020\023\032\0020\002HÖ\001R\024\020\004\032\0020\0058VXÖ\005¢\006\006\032\004\b\006\020\007¨\006\024"}, d2 = {"ai/grazie/tree/model/SentenceWithTreeDependencies.ConlluBatch.$serializer", "Lkotlinx/serialization/internal/GeneratedSerializer;", "Lai/grazie/tree/model/SentenceWithTreeDependencies$ConlluBatch;", "()V", "descriptor", "Lkotlinx/serialization/descriptors/SerialDescriptor;", "getDescriptor", "()Lkotlinx/serialization/descriptors/SerialDescriptor;", "childSerializers", "", "Lkotlinx/serialization/KSerializer;", "()[Lkotlinx/serialization/KSerializer;", "deserialize", "decoder", "Lkotlinx/serialization/encoding/Decoder;", "serialize", "", "encoder", "Lkotlinx/serialization/encoding/Encoder;", "value", "model-tree"}) public static final class $serializer implements GeneratedSerializer<ConlluBatch> { @NotNull public static final $serializer INSTANCE = new $serializer(); @NotNull public KSerializer<?>[] typeParametersSerializers() { return (KSerializer<?>[])GeneratedSerializer.DefaultImpls.typeParametersSerializers(this); } @NotNull public SerialDescriptor getDescriptor() { return (SerialDescriptor)descriptor; } @NotNull public KSerializer<?>[] childSerializers() { KSerializer[] arrayOfKSerializer = new KSerializer[1]; arrayOfKSerializer[0] = (KSerializer)new ArrayListSerializer((KSerializer)StringSerializer.INSTANCE); return (KSerializer<?>[])arrayOfKSerializer; } @NotNull public SentenceWithTreeDependencies.ConlluBatch deserialize(@NotNull Decoder decoder) { Intrinsics.checkNotNullParameter(decoder, "decoder"); SerialDescriptor serialDescriptor = getDescriptor(); boolean bool = true; int i = 0; Object object = null; CompositeDecoder compositeDecoder = decoder.beginStructure(serialDescriptor); if (compositeDecoder.decodeSequentially()) { object = compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)new ArrayListSerializer((KSerializer)StringSerializer.INSTANCE), object); i |= 0x1; } else { while (bool) { int j = compositeDecoder.decodeElementIndex(serialDescriptor); switch (j) { case -1: bool = false; continue;case 0: object = compositeDecoder.decodeSerializableElement(serialDescriptor, 0, (DeserializationStrategy)new ArrayListSerializer((KSerializer)StringSerializer.INSTANCE), object); i |= 0x1; continue; }  throw new UnknownFieldException(j); }  }  compositeDecoder.endStructure(serialDescriptor); return new SentenceWithTreeDependencies.ConlluBatch(i, (List)object, null); } public void serialize(@NotNull Encoder encoder, @NotNull SentenceWithTreeDependencies.ConlluBatch value) { Intrinsics.checkNotNullParameter(encoder, "encoder"); Intrinsics.checkNotNullParameter(value, "value"); SerialDescriptor serialDescriptor = getDescriptor(); CompositeEncoder compositeEncoder = encoder.beginStructure(serialDescriptor); SentenceWithTreeDependencies.ConlluBatch.write$Self(value, compositeEncoder, serialDescriptor); compositeEncoder.endStructure(serialDescriptor); } static { PluginGeneratedSerialDescriptor pluginGeneratedSerialDescriptor = new PluginGeneratedSerialDescriptor("ai.grazie.tree.model.SentenceWithTreeDependencies.ConlluBatch", INSTANCE, 1); pluginGeneratedSerialDescriptor.addElement("trees", false); descriptor = pluginGeneratedSerialDescriptor; } } @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000\026\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\002\030\002\n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002J\017\020\003\032\b\022\004\022\0020\0050\004HÆ\001¨\006\006"}, d2 = {"Lai/grazie/tree/model/SentenceWithTreeDependencies$ConlluBatch$Companion;", "", "()V", "serializer", "Lkotlinx/serialization/KSerializer;", "Lai/grazie/tree/model/SentenceWithTreeDependencies$ConlluBatch;", "model-tree"}) public static final class Companion { private Companion() {} @NotNull public final KSerializer<SentenceWithTreeDependencies.ConlluBatch> serializer() { return (KSerializer<SentenceWithTreeDependencies.ConlluBatch>)SentenceWithTreeDependencies.ConlluBatch.$serializer.INSTANCE; } } @NotNull public final List<String> getTrees() { return this.trees; } @NotNull public final List<String> component1() { return this.trees; } @NotNull public final ConlluBatch copy(@NotNull List<String> trees) { Intrinsics.checkNotNullParameter(trees, "trees"); return new ConlluBatch(trees); } @NotNull public String toString() { return "ConlluBatch(trees=" + this.trees + ")"; } public int hashCode() { return this.trees.hashCode(); } public boolean equals(@Nullable Object other) { if (this == other) return true;  if (!(other instanceof ConlluBatch)) return false;  ConlluBatch conlluBatch = (ConlluBatch)other; return !!Intrinsics.areEqual(this.trees, conlluBatch.trees); } }
/*    */   @Metadata(mv = {1, 7, 0}, k = 1, xi = 48, d1 = {"\000*\n\002\030\002\n\002\020\000\n\002\b\002\n\002\030\002\n\000\n\002\020\016\n\000\n\002\030\002\n\000\n\002\030\002\n\000\n\002\020 \n\000\b\003\030\0002\0020\001B\007\b\002¢\006\002\020\002J\016\020\003\032\0020\0042\006\020\005\032\0020\006J\017\020\007\032\b\022\004\022\0020\0040\bHÆ\001J\024\020\t\032\0020\n2\f\020\013\032\b\022\004\022\0020\0040\f¨\006\r"}, d2 = {"Lai/grazie/tree/model/SentenceWithTreeDependencies$Companion;", "", "()V", "empty", "Lai/grazie/tree/model/SentenceWithTreeDependencies;", "sentence", "", "serializer", "Lkotlinx/serialization/KSerializer;", "toConlluBatch", "Lai/grazie/tree/model/SentenceWithTreeDependencies$ConlluBatch;", "deps", "", "model-tree"}) @SourceDebugExtension({"SMAP\nSentenceWithTreeDependencies.kt\nKotlin\n*S Kotlin\n*F\n+ 1 SentenceWithTreeDependencies.kt\nai/grazie/tree/model/SentenceWithTreeDependencies$Companion\n+ 2 ArrayIntrinsics.kt\nkotlin/ArrayIntrinsicsKt\n+ 3 _Collections.kt\nkotlin/collections/CollectionsKt___CollectionsKt\n*L\n1#1,66:1\n26#2:67\n1549#3:68\n1620#3,3:69\n*S KotlinDebug\n*F\n+ 1 SentenceWithTreeDependencies.kt\nai/grazie/tree/model/SentenceWithTreeDependencies$Companion\n*L\n35#1:67\n40#1:68\n40#1:69,3\n*E\n"}) public static final class Companion { private Companion() {}
/* 33 */     @NotNull public final KSerializer<SentenceWithTreeDependencies> serializer() { return (KSerializer<SentenceWithTreeDependencies>)SentenceWithTreeDependencies.$serializer.INSTANCE; }
/*    */     @NotNull
/* 35 */     public final SentenceWithTreeDependencies empty(@NotNull String sentence) { Intrinsics.checkNotNullParameter(sentence, "sentence"); int $i$f$emptyArray = 0; return new SentenceWithTreeDependencies(sentence, 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */ 
/*    */           
/* 67 */           new SentenceWithTreeDependencies.Node[0]); } @NotNull public final SentenceWithTreeDependencies.ConlluBatch toConlluBatch(@NotNull List deps) { Intrinsics.checkNotNullParameter(deps, "deps"); Iterable $this$map$iv = deps; int $i$f$map = 0;
/* 68 */       Iterable iterable1 = $this$map$iv; Collection<String> destination$iv$iv = new ArrayList(CollectionsKt.collectionSizeOrDefault($this$map$iv, 10)); int $i$f$mapTo = 0;
/* 69 */       for (Object item$iv$iv : iterable1) {
/* 70 */         SentenceWithTreeDependencies sentenceWithTreeDependencies = (SentenceWithTreeDependencies)item$iv$iv; Collection<String> collection = destination$iv$iv; int $i$a$-map-SentenceWithTreeDependencies$Companion$toConlluBatch$1 = 0; collection.add(ArraysKt.joinToString$default((Object[])sentenceWithTreeDependencies.getTree(), "\n", null, null, 0, null, new SentenceWithTreeDependencies$Companion$toConlluBatch$1$1(sentenceWithTreeDependencies), 30, null));
/* 71 */       }  List<String> list = (List)destination$iv$iv;
/*    */       return new SentenceWithTreeDependencies.ConlluBatch(list); }
/*    */ 
/*    */     
/*    */     @Metadata(mv = {1, 7, 0}, k = 3, xi = 48, d1 = {"\000\016\n\000\n\002\020\r\n\000\n\002\030\002\n\000\020\000\032\0020\0012\006\020\002\032\0020\003H\n¢\006\002\b\004"}, d2 = {"<anonymous>", "", "node", "Lai/grazie/tree/model/SentenceWithTreeDependencies$Node;", "invoke"})
/*    */     static final class SentenceWithTreeDependencies$Companion$toConlluBatch$1$1 extends Lambda implements Function1<SentenceWithTreeDependencies.Node, CharSequence> {
/*    */       @NotNull
/*    */       public final CharSequence invoke(@NotNull SentenceWithTreeDependencies.Node node) {
/*    */         Intrinsics.checkNotNullParameter(node, "node");
/*    */         return node.getId() + "\t" + node.getId() + "\t_\t_\t_\t_\t" + node.getRange().substring(this.$it.getText()) + "\t" + node.getHeadId() + "\t_\t_";
/*    */       }
/*    */       
/*    */       SentenceWithTreeDependencies$Companion$toConlluBatch$1$1(SentenceWithTreeDependencies $it) {
/*    */         super(1);
/*    */       }
/*    */     } }
/*    */ 
/*    */   
/*    */   public boolean equals(@Nullable Object other) {
/*    */     if (this == other)
/*    */       return true; 
/*    */     if (other == null || getClass() != other.getClass())
/*    */       return false; 
/*    */     (SentenceWithTreeDependencies)other;
/*    */     if (!Intrinsics.areEqual(this.text, ((SentenceWithTreeDependencies)other).text))
/*    */       return false; 
/*    */     if (!Arrays.equals((Object[])this.tree, (Object[])((SentenceWithTreeDependencies)other).tree))
/*    */       return false; 
/*    */     return true;
/*    */   }
/*    */   
/*    */   public int hashCode() {
/*    */     int result = this.text.hashCode();
/*    */     result = 31 * result + Arrays.hashCode((Object[])this.tree);
/*    */     return result;
/*    */   }
/*    */   
/*    */   @NotNull
/*    */   public final String component1() {
/*    */     return this.text;
/*    */   }
/*    */   
/*    */   @NotNull
/*    */   public final Node[] component2() {
/*    */     return this.tree;
/*    */   }
/*    */   
/*    */   @NotNull
/*    */   public final SentenceWithTreeDependencies copy(@NotNull String text, @NotNull Node[] tree) {
/*    */     Intrinsics.checkNotNullParameter(text, "text");
/*    */     Intrinsics.checkNotNullParameter(tree, "tree");
/*    */     return new SentenceWithTreeDependencies(text, tree);
/*    */   }
/*    */   
/*    */   @NotNull
/*    */   public String toString() {
/*    */     return "SentenceWithTreeDependencies(text=" + this.text + ", tree=" + Arrays.toString((Object[])this.tree) + ")";
/*    */   } }


/* Location:              /Volumes/Macintosh HD/Users/phodal/Desktop/ml-llm.jar!/ai/grazie/tree/model/SentenceWithTreeDependencies.class
 * Java compiler version: 17 (61.0)
 * JD-Core Version:       1.1.3
 */